{"version":3,"file":"resumable.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * Creates a resumable function that only gets imported when needed.\n */\nexport default function Resumable<Func extends (...args: any[]) => any, This = unknown>(importURL: string | URL, exportName = 'default') {\n    /**\n     * A wrapper function around the importee that will pass params and `this` down to the function\n     */\n    return function(this: This, ...params: Parameters<Func>) {\n        return import(importURL.toString()).then((mod) => mod[exportName].apply(this, params)) as Promise<ReturnType<Func>>\n    }\n}\n\n// One-liner: const Resumable = (importURL, exportName = 'default') => function(...params) { return import(importURL.toString()).then(mod => mod[exportName].apply(this, params)) }"],"names":["importURL","exportName","t","_arguments","arguments","_this","this","toString","Promise","resolve","then","_interopNamespace","require","mod","apply","slice","call"],"mappings":"6RAGwB,SAAgEA,EAAyBC,GAI7G,YAJuH,IAAVA,IAAAA,EAAa,WAInE,WAAA,IAC5CC,EAD4CC,EAAAC,UAAAC,EAAAC,KACnD,OAAOJ,EAAOF,EAAUO,WAAjBC,QAAAC,UAAAC,KAAA,wBAAA,OAAAC,EAAAC,QAAAV,GAAA,IAA6BQ,KAAK,SAACG,GAAG,OAAKA,EAAIZ,GAAYa,MAAMT,EAAI,GAAAU,MAAAC,KAAAb,GAAS,EACzF,CACJ"}