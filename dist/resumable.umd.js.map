{"version":3,"file":"resumable.umd.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Creates a resumable function that only gets imported when needed.\n */\nexport default function Resumable<Func extends (...args: any[]) => any, This = unknown>(importURL: string | URL, exportName = 'default') {\n    /**\n     * A wrapper function around the importee that will pass params and `this` down to the function\n     */\n    return function(this: This, ...params: Parameters<Func>) {\n        return import(importURL.toString()).then((mod) => mod[exportName].apply(this, params)) as Promise<ReturnType<Func>>\n    }\n}\n\n// One-liner: const Resumable = (importURL, exportName = 'default') => function(...params) { return import(importURL.toString()).then(mod => mod[exportName].apply(this, params)) }"],"names":["importURL","exportName","_arguments","arguments","_this","this","import","toString","then","mod","apply","slice","call"],"mappings":"mOAGwB,SAAgEA,EAAyBC,GAI7G,YAJuH,IAAVA,IAAAA,EAAa,WAInE,WAAA,IAAAC,EAAAC,UAAAC,EAAAC,KACnD,OAAOC,OAAON,EAAUO,YAAYC,KAAK,SAACC,GAAG,OAAKA,EAAIR,GAAYS,MAAMN,EAAI,GAAAO,MAAAC,KAAAV,GAAS,EACzF,CACJ"}