{"version":3,"file":"resumable.modern.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Creates a resumable function that only gets imported when needed.\n */\nexport default function Resumable<Func extends (...args: any[]) => any, This = unknown>(importURL: string | URL, exportName = 'default') {\n    /**\n     * A wrapper function around the importee that will pass params and `this` down to the function\n     */\n    return function(this: This, ...params: Parameters<Func>) {\n        return import(importURL.toString()).then((mod) => mod[exportName].apply(this, params)) as Promise<ReturnType<Func>>\n    }\n}\n\n// One-liner: const Resumable = (importURL, exportName = 'default') => function(...params) { return import(importURL.toString()).then(mod => mod[exportName].apply(this, params)) }"],"names":["Resumable","importURL","exportName","params","toString","then","mod","apply","this"],"mappings":"SAGwBA,EAAgEC,EAAyBC,EAAa,WAI1H,mBAA+BC,GAC3B,cAAcF,EAAUG,YAAYC,KAAMC,GAAQA,EAAIJ,GAAYK,MAAMC,KAAML,GAClF,CACJ"}